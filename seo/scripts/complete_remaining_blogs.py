#!/usr/bin/env python3
"""
Kalan Bloglar ƒ∞√ßin G√∂rsel Entegrasyonu
G√∂rseli olmayan 13 blog i√ßin kapsamlƒ± g√∂rsel se√ßimi ve optimizasyonu
"""

import os
import json
import requests
from datetime import datetime
from PIL import Image
from io import BytesIO
from bs4 import BeautifulSoup

class RemainingBlogsCompleter:
    def __init__(self, project_root="/Users/macos/Documents/Projeler/DryAlle"):
        self.project_root = project_root
        self.blog_root = os.path.join(project_root, 'blog')
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36'
        })
        
        # Kalan bloglar i√ßin g√∂rsel havuzu (yeni URL'ler)
        self.remaining_image_pool = [
            "https://images.unsplash.com/photo-1604719312566-878b4b1d2c7b?w=1200&h=630&fit=crop",
            "https://images.unsplash.com/photo-1563013544-824ae1b704d3?w=1200&h=630&fit=crop",
            "https://images.unsplash.com/photo-1585320806297-9794b3e4eeae?w=1200&h=630&fit=crop",
            "https://images.unsplash.com/photo-1598300042247-d088f8ab3a91?w=1200&h=630&fit=crop",
            "https://images.unsplash.com/photo-1564069114553-7215e1ff1890?w=1200&h=630&fit=crop",
            "https://images.unsplash.com/photo-1628177142898-93e36e4e3a50?w=1200&h=630&fit=crop",
            "https://images.unsplash.com/photo-1581578731548-c64695cc6952?w=1200&h=630&fit=crop",
            "https://images.unsplash.com/photo-1609205105329-36f48ebaeb01?w=1200&h=630&fit=crop",
            "https://images.unsplash.com/photo-1541560052-77312a200a87?w=1200&h=630&fit=crop",
            "https://images.unsplash.com/photo-1586264790024-2c9b4b9d3fd0?w=1200&h=630&fit=crop",
            "https://images.unsplash.com/photo-1558618666-fbd6c802d1c6?w=1200&h=630&fit=crop",
            "https://images.unsplash.com/photo-1571019613454-1cb2f99b2d8b?w=1200&h=630&fit=crop",
            "https://images.unsplash.com/photo-1556228720-195a672e8a03?w=1200&h=630&fit=crop"
        ]
        self.used_urls = set()

    def find_blogs_without_images(self):
        """G√∂rseli olmayan bloglarƒ± bul"""
        blogs_without_images = []
        
        for blog_dir in os.listdir(self.blog_root):
            if blog_dir.startswith('.') or blog_dir == 'index.html':
                continue
            
            blog_path = os.path.join(self.blog_root, blog_dir)
            if not os.path.isdir(blog_path):
                continue
            
            # Featured image kontrol√º
            featured_webp = os.path.join(blog_path, 'featured-image.webp')
            
            if not os.path.exists(featured_webp):
                # Blog analizi
                index_path = os.path.join(blog_path, 'index.html')
                if os.path.exists(index_path):
                    analysis = self.analyze_blog_for_theme(index_path, blog_dir)
                    if analysis:
                        blogs_without_images.append(analysis)
        
        return blogs_without_images

    def analyze_blog_for_theme(self, html_path, slug):
        """Blog temasƒ±nƒ± analiz et"""
        try:
            with open(html_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            soup = BeautifulSoup(content, 'html.parser')
            
            # Ba≈ülƒ±k ve i√ßerik
            title = soup.find('title')
            title_text = title.get_text() if title else ""
            
            # Ana i√ßerik
            main_content = ""
            for tag in soup.find_all(['p', 'h1', 'h2', 'h3', 'li']):
                main_content += tag.get_text() + " "
            
            full_text = (title_text + " " + main_content).lower()
            
            # Tema tespiti
            theme_keywords = {
                "profesyonel": ["kuru", "temizleme", "profesyonel", "uzman", "hizmet"],
                "halƒ±": ["halƒ±", "hali", "yƒ±kama", "kilim", "dokuma"],
                "deri": ["deri", "√ßanta", "ayakkabƒ±", "s√ºet", "nubuk"],
                "perde": ["perde", "t√ºl", "ev tekstili", "pencere"],
                "gelinlik": ["gelinlik", "d√ºƒü√ºn", "abiye", "√∂zel g√ºn"],
                "mobilya": ["koltuk", "mobilya", "d√∂≈üeme", "kuma≈ü"],
                "leke": ["leke", "√ßƒ±karma", "temizlik", "yaƒü"]
            }
            
            theme_scores = {}
            for theme, keywords in theme_keywords.items():
                score = sum(full_text.count(keyword) for keyword in keywords)
                if score > 0:
                    theme_scores[theme] = score
            
            primary_theme = max(theme_scores, key=theme_scores.get) if theme_scores else "profesyonel"
            
            return {
                'slug': slug,
                'title': title_text.strip(),
                'theme': primary_theme,
                'content_length': len(main_content.split())
            }
            
        except Exception as e:
            return None

    def download_and_convert_image(self, url, blog_slug):
        """G√∂rseli indir ve WebP'ye √ßevir"""
        try:
            response = self.session.get(url, timeout=30)
            response.raise_for_status()
            
            # PIL ile a√ß
            image = Image.open(BytesIO(response.content))
            
            # RGB moduna √ßevir
            if image.mode in ('RGBA', 'LA', 'P'):
                image = image.convert('RGB')
            
            # 1200x630 boyutuna resize et
            target_size = (1200, 630)
            image = image.resize(target_size, Image.Resampling.LANCZOS)
            
            # Blog dizinine kaydet
            blog_dir = os.path.join(self.blog_root, blog_slug)
            webp_path = os.path.join(blog_dir, 'featured-image.webp')
            image.save(webp_path, 'WebP', quality=85, optimize=True)
            
            file_size = os.path.getsize(webp_path)
            
            return {
                'success': True,
                'file_path': webp_path,
                'file_size_kb': file_size // 1024,
                'dimensions': f"{image.width}x{image.height}"
            }
            
        except Exception as e:
            return {
                'success': False,
                'error': str(e)
            }

    def update_blog_html(self, blog_slug):
        """Blog HTML dosyasƒ±nƒ± g√ºncelle"""
        try:
            blog_dir = os.path.join(self.blog_root, blog_slug)
            html_path = os.path.join(blog_dir, 'index.html')
            
            with open(html_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            soup = BeautifulSoup(content, 'html.parser')
            
            # Featured image ekle
            h1_tag = soup.find('h1')
            if h1_tag:
                new_img = soup.new_tag('img')
                new_img['class'] = 'featured-image'
                new_img['src'] = 'featured-image.webp'
                new_img['alt'] = f"{blog_slug} - Professional Dry Cleaning Service"
                new_img['width'] = '1200'
                new_img['height'] = '630'
                new_img['loading'] = 'lazy'
                new_img['style'] = 'width: 100%; height: auto; margin: 20px 0;'
                
                h1_tag.insert_after(new_img)
            
            # Meta tags g√ºncelle
            head = soup.find('head')
            if head:
                # OG image
                og_image = soup.new_tag('meta')
                og_image['property'] = 'og:image'
                og_image['content'] = f"https://dryallekurutemizleme.com/blog/{blog_slug}/featured-image.webp"
                head.append(og_image)
                
                # Twitter card
                twitter_image = soup.new_tag('meta')
                twitter_image['name'] = 'twitter:image'
                twitter_image['content'] = f"https://dryallekurutemizleme.com/blog/{blog_slug}/featured-image.webp"
                head.append(twitter_image)
            
            # HTML'i kaydet
            with open(html_path, 'w', encoding='utf-8') as f:
                f.write(str(soup))
            
            return {'success': True}
            
        except Exception as e:
            return {'success': False, 'error': str(e)}

    def get_next_available_image(self):
        """Kullanƒ±lmamƒ±≈ü g√∂rsel URL'i al"""
        available_images = [url for url in self.remaining_image_pool if url not in self.used_urls]
        
        if available_images:
            selected_url = available_images[0]
            self.used_urls.add(selected_url)
            return selected_url
        
        return None

    def complete_remaining_blogs(self):
        """Kalan bloglarƒ± tamamla"""
        print("üîÑ Kalan bloglar i√ßin g√∂rsel entegrasyonu ba≈ülƒ±yor...")
        
        # G√∂rseli olmayan bloglarƒ± bul
        blogs_without_images = self.find_blogs_without_images()
        print(f"üìä G√∂rseli olmayan blog sayƒ±sƒ±: {len(blogs_without_images)}")
        
        results = []
        successful = 0
        failed = 0
        
        for blog in blogs_without_images:
            slug = blog['slug']
            theme = blog['theme']
            
            print(f"üì• ƒ∞≈üleniyor: {slug} ({theme})...")
            
            # G√∂rsel URL'i al
            image_url = self.get_next_available_image()
            
            if not image_url:
                print(f"   ‚ùå Uygun g√∂rsel bulunamadƒ±")
                failed += 1
                continue
            
            # G√∂rseli indir
            download_result = self.download_and_convert_image(image_url, slug)
            
            if download_result['success']:
                # HTML'i g√ºncelle
                html_result = self.update_blog_html(slug)
                
                if html_result['success']:
                    successful += 1
                    print(f"   ‚úÖ Ba≈üarƒ±lƒ±: {download_result['file_size_kb']}KB")
                else:
                    failed += 1
                    print(f"   ‚ùå HTML g√ºncelleme hatasƒ±")
            else:
                failed += 1
                print(f"   ‚ùå ƒ∞ndirme hatasƒ±: {download_result.get('error', 'Unknown')}")
            
            results.append({
                'slug': slug,
                'theme': theme,
                'url': image_url,
                'status': 'SUCCESS' if download_result['success'] else 'FAILED',
                'download_result': download_result
            })
        
        return {
            'total_processed': len(blogs_without_images),
            'successful': successful,
            'failed': failed,
            'results': results
        }

def main():
    """Kalan Bloglar ƒ∞√ßin G√∂rsel Entegrasyonu"""
    print("üîÑ KALAN BLOGLAR ƒ∞√áƒ∞N G√ñRSEL ENTEGRASYONU")
    print("=" * 60)
    print("üéØ Eksik G√∂rseller | WebP Optimizasyon | HTML Entegrasyon")
    print("=" * 60)
    
    completer = RemainingBlogsCompleter()
    
    try:
        # Kalan bloglarƒ± tamamla
        results = completer.complete_remaining_blogs()
        
        # √ñzet
        print("\n" + "=" * 60)
        print("üîÑ KALAN BLOG ENTEGRASYONƒ∞ TAMAMLANDI")
        print("=" * 60)
        
        print(f"‚úÖ Toplam i≈ülenen: {results['total_processed']}")
        print(f"‚úÖ Ba≈üarƒ±lƒ±: {results['successful']}")
        print(f"‚ùå Ba≈üarƒ±sƒ±z: {results['failed']}")
        
        if results['total_processed'] > 0:
            success_rate = (results['successful'] / results['total_processed']) * 100
            print(f"‚úÖ Ba≈üarƒ± oranƒ±: {success_rate:.1f}%")
        
        if results['successful'] > 0:
            print(f"\nüéâ {results['successful']} blog i√ßin g√∂rsel entegrasyonu tamamlandƒ±!")
            print(f"   ‚Ä¢ T√ºm g√∂rseller WebP formatƒ±nda optimize edildi")
            print(f"   ‚Ä¢ HTML ve meta tag'ler g√ºncellendi")
            print(f"   ‚Ä¢ 1200x630px boyutunda standardize edildi")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Entegrasyon hatasƒ±: {str(e)}")
        return False

if __name__ == "__main__":
    success = main()
    exit(0 if success else 1)